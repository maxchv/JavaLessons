Домашнее задание. 

Реализовать книжный магазин. Клиент может зарегистрироваться в книжном магазине,
при этом он получит уникальный идентификатор и кредит. Кроме того, клиент может быть удален из списка в соответствии с его запросом.
Книжный магазин хранит два массива: клиентов и книг. Подумать над реализацией динамического массива.

Клиент должен предоставить имя и адрес для регистрации, также он должен установить пароль для защиты своего счета. 
Адрес и пароль может быть изменен владельцем. Клиент может купить в кредит или наличными.

Кредит имеет ограничение в 1000 грн.

7 интерфейсов и 1 абстрактный класс представлены ниже, смысл каждого метода можно легко понять по имени метода. 
Вы должны реализовать все эти интерфейсы и класс. 

Напишите небольшое приложение демонстрирующее применение реализованных классов.

/************************************************************************
 *  Интерфейс магазина. 
 * 
*************************************************************************/

interface Store {
   // регистрация клиента
   public void register(Customer customer);
   // удаление клиента
   public void remove(Customer customer);
   // получить клиента по id
   public Customer getCustomer(int id);   

}


/*************************************************************************
 *  Интерфейс Книжный Магазин						 *
 *  В Книжном магазине необходимо хранить массив клиентов и массив книг, *
 *  который содержит все книги в магазине                                *
 ************************************************************************/ 

interface BookStore extends Store {

   /*
	Этот метод вызвается когда клиент пытается покупает книгу

      В методе необходимо реализовать провекру:
         1. хватает ли заданного количества книг в магазине
         2. не достиг ли кредитный лимит максимального значения

      Если все условия выполняются, тогда возвращается true иначе false.
   */
   public boolean buy(Customer customer, Book book, int amount);

   // Добавить книгу в магазин.
   public void importBooks(Book book, int amount);

   // получить все книги с указанным названием из массива книг
   // предполагается, что названия книг не совпадают 
   public Book getBooks(String title);

   // получить количество заданных книг 
   public int getBookAmount(String title);

   // получить все книги, написанные автором с именем name
   public Book[] getBooksByAuthorName(String name);

   // получить все книги в списке книг
   public Book[] getAllBooks();

}


/*************************************************************************
 *   Интерфейс книги                                                     *
 ************************************************************************/ 

interface Book {

  // получить название этой книги.
  public String getTitle();

  // получить автора этой книги.
  public Author getAuthor();

  // получить дату публикации этой книги.
  public java.util.Date  getDate();

  // получить издание этой книги.
  public int getEdition();

  // получить краткое описание этой книги.
  public String getDescription();

  // получить цену этой книги.
  public float getPrice();

}


/*************************************************************************
 *  Интерфейс человека							 *
 ************************************************************************/ 


interface Person {

   public String getName();
   public Address getAddress();

}


/*************************************************************************
 *  Интерфейс покупателя	    					 *
 ************************************************************************/ 


interface Customer extends Person {
   // id клиента
   public int getID();
   // кредит клиента
   public Credit getCredit();
   // задание пароля
   public void setPassword(String passwd);
}



/*************************************************************************
 *  Интерфейс автора		    					 *
 ************************************************************************/ 


interface Author extends Person {

   // Книги написанные этим автором
   public Book[] getAllWrittenBook();

}


/*************************************************************************
 *  Интерфейс адреса			                                 *
 ************************************************************************/ 


interface Address {

   public String getStreetName();
   public int getStreetNumber();
   public String getCity();
   public String getState();
   public String getZipCode();
   public String toString();
   public boolean equals(Address addr);

}


/************************************************************************
 *  Абстрактный класс кредита                                           *
 ***********************************************************************/


abstract class Credit {

   final public static int MAX_AMOUNT = 1000; 
   private int debit;

   текущий дебет
   public abstract int getDebit();

   // обновить дебет, проверить, что он не превышает лимит
   protected abstract void addDebit(int amount);

}