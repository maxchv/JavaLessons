Задание 1.

В кругу стоят N человек, пронумерованных от 1 до N. При ведении
счета по кругу вычеркивается каждый второй человек, пока не
останется один.
Разработать два класса, моделирующие процесс. Один из классов
должен использовать класс ArrayList, а второй – LinkedList.
Приложение при старте, выводит в консоли текстовое меню для выбора
метода класса, использующего класс ArrayList либо класса,
использующего LinkedList.
После выполнения выбранной операции, на экран должно выводиться
время выполнения операции. Какой из двух классов работает быстрее?
Почему?

Задание 2.

1. Создайте проект MapLab с классом MapSetTester и методом main. Вы будете использовать классы HashMap и TreeSet
2. В методе main создайте словарь HashMap с именем networkMap, в котором будут храниться данные в виде пары ключ и
   значение, где ключ - имя телеканала, а связанное значение - это множество типа TreeSet, который содержит телевизионные
   шоу для этого телеканала:

   HashMap <______, ______> networkMap = new HashMap <______, ______> ();

3. В цикле запросите у пользователя название телешоу, а затем запросите пользователя ввести имя телевизионного канала
   для этого шоу. После того, как у вас появяться исходные данные, найдите канал в словаре networkMap.

   Если канал еще не добавлен в словарь, создайте множество TreeSet в которое добавть название телешоу, а затем добавьте
   ключ к паре значений (канал, с заданным телевизионным шоу) в словарь.

   Если канал находится в словаре, добавьте телешоу к множеству TreeSet этого телеканала.

   Таким образом введите не менее 10 телевизионных шоу.
   После обновления словаря выведите его содержимое.

   Пример вывода (обратите внимание, что сети не расположены в лексикографическом порядке, но телевизионные
   шоу для каждого канала - в лексикографическом порядке ... почему?):

   Input tv network: FOX
   Input tv show on FOX: The Simpsons
   {FOX=[The Simpsons]}

   Input tv network: NBC
   Input tv show on NBC: ER
   {FOX=[The Simpsons], NBC=[ER]}

   Input tv network: ABC
   Input tv show on ABC: 20/20
   {FOX=[The Simpsons], NBC=[ER], ABC=[20/20]}

   Input tv network: CBS
   Input tv show on CBS: Survivor
   {CBS=[Survivor], FOX=[The Simpsons], NBC=[ER], ABC=[20/20]}

   Input tv network: ABC
   Input tv show on ABC: Lost
   {CBS=[Survivor], FOX=[The Simpsons], NBC=[ER], ABC=[20/20, Lost]}

   Input tv network: FOX
   Input tv show on FOX: Family Guy
   {CBS=[Survivor], FOX=[Family Guy, The Simpsons], NBC=[ER], ABC=[20/20, Lost]}

   Input tv network: CBS
   Input tv show on CBS: CSI
   {CBS=[CSI, Survivor], FOX=[Family Guy, The Simpsons], NBC=[ER], ABC=[20/20, Lost]}

   Input tv network: FOX
   Input tv show on FOX: American Idol
   {CBS=[CSI, Survivor], FOX=[American Idol, Family Guy, The Simpsons], NBC=[ER], ABC=[20/20, Lost]}

   Input tv network: ABC
   Input tv show on ABC: Desperate Housewives
   {CBS=[CSI, Survivor], FOX=[American Idol, Family Guy, The Simpsons], NBC=[ER], ABC=[20/20, Desperate Housewives, Lost]}

   Input tv network: NBC
   Input tv show on NBC: Law And Order
   {CBS=[CSI, Survivor], FOX=[American Idol, Family Guy, The Simpsons], NBC=[ER, Law And Order], ABC=[20/20, Desperate Housewives, Lost]}

4. Если у вас есть словарь с кналами, выведите содержимое словаря алфавитном порядке каналов, по одному кналу в каждой
   строке.
   Создайте массив содержащий ключи (названия каналов) словаря networkMap.
   Отсортируйте полученный массив каналов по алфавиту.
   Переберите элементы массива ключей, что бы получить соответствующее значение (наборы ТВ-шоу) для каждого
   ключа из словаря и распечатать их.
   (Примечание: Вам не придется сортировать ТВ-шоу для канала, так как они уже будут отсортированы ... почему?)

Задание 3.

Есть список студентов. 
Используя потоки (stream) и лямбда выражения необходимо:
	1. Выбрать всех мужчин-военнообязанных (возраст от 18 до 27 лет)
	2. Найти средний возраст среди мужчин
	3. Найти кол-во потенциально работоспособных  студентов в выборке (т.е. от 18 лет и учитывая 
	   что женщины выходят в 55 лет, а мужчина в 60)
	4. Отсортировать студентов по имени в обратном алфавитном порядке
	5. найти студента с максимальным возрастом
	6. Найти студента с минимальным возрастом

public class StreamExcersice {

    private enum Sex {
        MAN,
        WOMEN
    }

    private static class Student {
        private final String name;
        private final Integer age;
        private final Sex sex;

        public Student(String name, Integer age, Sex sex) {
            this.name = name;
            this.age = age;
            this.sex = sex;
        }

        public String getName() {
            return name;
        }

        public Integer getAge() {
            return age;
        }

        public Sex getSex() {
            return sex;
        }

        @Override
        public String toString() {
            return "{" +
                    "name='" + name + '\'' +
                    ", age=" + age +
                    ", sex=" + sex +
                    '}';
        }
        
        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o instanceof Student)) return false;
            Student people = (Student) o;
            return Objects.equals(name, people.name) &&
                    Objects.equals(age, people.age) &&
                    Objects.equals(sex, people.sex);
        }

        @Override
        public int hashCode() {
            return Objects.hash(name, age, sex);
        }
    }
	
    static Collection<Student> students = Arrays.asList(
            new Student("Вася", 16, Sex.MAN),
            new Student("Петя", 23, Sex.MAN),
            new Student("Соня", 18, Sex.WOMEN),
            new Student("Виктор Петрович", 65, Sex.MAN),
            new Student("Дима", 25, Sex.MAN),
            new Student("Катя", 21, Sex.WOMEN),
            new Student("Семен", 33, Sex.MAN),
            new Student("Елена", 42, Sex.WOMEN),
            new Student("Иван Иванович", 69, Sex.MAN)
    );
    
    static List<Student> ex01() {
    	// TODO: Задание 1
    	// Выбрать всех мужчин-военнообязанных (возраст от 18 до 27 лет)
    	
    	return null;
    }
    
    static Double ex02() {
    	// TODO: Задание 2
    	// Найти средний возраст среди мужчин
    	
    	return null;
    }
    
    static Long ex03() {
    	// TODO: Задание 3
    	// Найти кол-во потенциально работоспособных 
    	// студентов в выборке (т.е. от 18 лет и учитывая 
    	// что женщины выходят в 55 лет, а мужчина в 60)
    	
    	return null;
    	
    }
    
    static List<Student> ex04() {
    	// TODO: Задание 4    	
    	// Отсортировать студентов по имени в обратном алфавитном порядке
    	
    	return null;
    }
    
    static Student ex05() {
    	//  TODO: Задание 5
    	//  найти студента с максимальным возрастом
    	
    	return null;
    }
    
    static Student ex06() {
    	// TODO: Задание 6
    	// Найти студента с минимальным возрастом
    	
    	return null;
    }
    
    public static void main(String[] args) {
		// TODO: тестировать здесь
	}
} 
